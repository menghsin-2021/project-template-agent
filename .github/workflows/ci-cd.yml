name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 前端測試和建構
  frontend-test:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝相依性
      run: npm ci

    - name: 執行 Lint 檢查
      run: npm run lint

    - name: 執行型別檢查
      run: npm run type-check

    - name: 執行格式檢查
      run: npm run format:check

    - name: 執行測試
      run: npm run test -- --coverage

    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend

    - name: 建構專案
      run: npm run build

    - name: 上傳建構產物
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/

  # 後端測試 (Node.js)
  backend-node-test:
    runs-on: ubuntu-latest
    if: ${{ contains(github.repository, 'node') || contains(github.repository, 'express') || contains(github.repository, 'nestjs') }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝相依性
      run: cd backend && npm ci

    - name: 執行 Lint 檢查
      run: cd backend && npm run lint

    - name: 執行型別檢查
      run: cd backend && npm run type-check

    - name: 執行測試
      run: cd backend && npm run test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    - name: 建構專案
      run: cd backend && npm run build

  # 後端測試 (Python)
  backend-python-test:
    runs-on: ubuntu-latest
    if: ${{ contains(github.repository, 'python') || contains(github.repository, 'fastapi') || contains(github.repository, 'django') }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設定 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安裝相依性
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 執行 Lint 檢查
      run: cd backend && flake8 .

    - name: 執行型別檢查
      run: cd backend && mypy .

    - name: 執行測試
      run: cd backend && pytest --cov=./ --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  # Docker 建構測試
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設定 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 建構 Docker 映像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: test-image:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全性掃描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 執行 npm 安全性稽核
      run: npm audit --audit-level moderate

    - name: 執行 CodeQL 分析
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: 自動建構
      uses: github/codeql-action/autobuild@v2

    - name: 執行 CodeQL 分析
      uses: github/codeql-action/analyze@v2

  # 效能測試
  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 安裝 Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: 執行 Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署到 Staging (develop 分支)
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [frontend-test, docker-build, security-scan]
    environment: staging
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 下載建構產物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/

    - name: 部署到 Staging
      run: |
        echo "部署到 Staging 環境"
        # 在這裡加入實際的部署指令
        # 例如: scp, rsync, 或雲端服務 CLI

  # 部署到 Production (main 分支)
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [frontend-test, docker-build, security-scan]
    environment: production
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 下載建構產物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/

    - name: 部署到 Production
      run: |
        echo "部署到 Production 環境"
        # 在這裡加入實際的部署指令

    - name: 通知部署成功
      if: success()
      run: |
        echo "部署成功！"
        # 可以加入 Slack 或其他通知機制
